JAVA NOTES

**JAVA BASICS PART - 2

* Java Program:
				  class Java{
					public static void main(String [] args){
							System.out.println("Hello World");
						}
					} 
					
					PUBLIC:          It is an access modifier which specifies from where and who can access the method. Making public means globally available.
					
					STATIC:          It is a keyword associated with the main method makes it class related method.It is used to reduce the wastage of memory.
					
					VOID:            It is keyword and a return type.
					
					MAIN:            It is a java main method. Program starts from main method. It is the Identifier that the JVM looks for as a starting point of java program.
					
					STRING [] ARGS:  It means array of strings. String - primitive data type, [] - array, args - it is variable.
					
					. :              It is called as a static method.
					
					PRINTLN:         It takes the cursor to print on next line
					
					SYSTEM:          It is a final class declared in java.lang.package
					
					OUT:             Instance of print type. It is public and static member field of system class Java.lang.system.
					
					PRINTLN():       java.io.printstream
					
				
* Data Types:   Data types are used to represent types of variable and expressions. Represents how much memory is allocated for variable.
                In Java there are 2 types of data types 

                1. Primitive Data Type: 
				                                                                     Primitive Data Type
																					 
													 Numeric datatype                   char datatype               Boolean datatype
									
									  Integral datatype            Floating datatype
				
				                            Byte                         Float
											Short                        Double
											Int
											Long
										  
										  
				2. Non-Primitive Data type:  String
				                             Array
											 etc.
											 
* Keywords:    In java we have 50 keywords

* Identifiers: It is a sequence of one or more characters. Java identifiers are case sensitive. userdefined names, classname, functional name, interface name, variable name.
			
			   int abc = 10; (valid)
			   int _abc = 30; (Not Valid)
			   int a-bc = 50; (Not Valid)
			   int 2abc = 40; (Not Valid)
			   int $abc = 30; (Not Valid)
			   
* Literals:    Java literals are of boolean, character, numeric or string data.

* Operators:   Operators are the symbols used in java to perform operations.
               1. Unary operator       (postfix (expr++/expr--), prefix(++expr/--expr/+expr/-expr/~/!))
               2. Arithmetic operator  (*, /, %, +, -)
               3. Shift operator       (<<, >>, >>>)
               4. Relational operator  (<, >, <=, =>, instanceOf, ==, !=)
               5. Bitwise operator     (&, ^, |)
               6. Logical operator     (&&, ||)
               7. Ternary operator     (?, : )
               8. Assignment operator  (=, +=, -=, *=, /=, %=, &=, ^=, |=, <<=, >>=, >>>=)
			   
			   
* JVM (Java Virtual Machine):
								JVM  doesn't exists physically. It is a specification that provides the runtime environment in which java bytecode can be executed.
								JVM does the following tasks:
								1. Loads the code
								2. Verifies code
								3. Executes the code 
								4. Provides runtime environment

                                . Java file is converted into .class file
								
								                                                 CLASS LOADER 
                                                                                      |

                                                 METHOD AREA       HEAP AREA       STACK AREA      PC REGISTER    NATIVE METHOD AREA	
                                                      |
                                          		      |
												EXECUTION ENGINE <=>	JAVA NATIVE INTERFACE <= NATIVE METHOD LIB

							    IN CLASS LOADER following process takes place: 
								                                               1.LOADING:
                                                                                 Bootstrap class loader
                                                                                 Extension class loader 
                                                                                 Application class loader
 
                                                                               2.Linking:
																			     Verify
																				 Prepare
																				 Resolve
																				
																			   3.Initialisation:
																			     All static variables are assigned with original value.
																				 Static blocks are executed.
																				 
								When .Java file is converted to .class file it is send to the class loader. In class loader it reads .class file and stores corrosponding information in the method area.
                                It stores the following information in method area:
                                1. Fully qualified class name
								2. Parent class name
								3. Method information
								4. Variable information
								5. Constructor information
								6. Modifier information
								7. Constant pool information
								
								Linking: 
								1. Verification: Here it verifies the bytecode, checks wether the .class file is generated by valid compiler.
								2. Preparation: JVM will allocate memory for class level static variable and assign default value.
								3. Resolve:  Symbolic names are given to original names
								
								Flow in the memory area:
								
								1. Method area: It is created when JVM is started. It stores .class file information and static variables.
								
								2. Heap area: It is created when JVM is started. It stores objects, instance variables and arrays. It can be accessed by the multiple threads, so it is not thread safe.
								
								3. Stack area: When new thread is created seperate stack is created. It stores the current running method and local variable.
								               When method is completed the corrosponding entry from stack is removed. The empty stack is deleted by JVM.
											   It is thread safe.
							    
								4. PC register: It holds address of next executing instructions. It is thread safe.
								
								5. Native method stack: All native method calls invoked by the thread will be stored in corrosponding native method stack. It is thread safe.
								
								Execution engine is responsible to execute java class file.
								It contains: JIT.
								
								
* JRE (Java Runtime Environment): 
                                  It is a set of software tools which are used for developing java applications. It is used to provide Runtime Environment .
								  It is implementation of JVM. It exists physically. 
								  It consists of set of libraries and other files where JVM is used at runtime.
								  
* JDK (Java Development Kit):   It is a software devvelopment environment which is used to develop Java applications and applets.
                                It exists physically. It is used for code execution and has prime functionality of development. It is platform dependent. 
								JRE + Development tools.
															

* Variables in java: 
                     A variable in Java is a container which holds the value while java program is executed.
                     A variable is assigned with data type.

                     Types of variable:
                     1. Local
                     2. Instance
                     3. Static

                    eg. int data = 20;
                    data = variable

                    class Variable{
                               int a = 10; --------> Instance variable(class variable)
                               static int b = 20; -----------> Static variable
                               
                               void add(){
                                    int c = 30,d; --------> Local variable
                                    d = a+b+c; // It will execute without any error.
                                    System.out.println(d);
                               }

                               void multi(){
                                    int e = 40, f;
                                    f = a*b*c*D*e; //It will throw an error as C is a local variable. 
                                    System.out.println(f);
                                }
                    }	

                    1. Local Variable: 
                                       Local variable are declared inside method, constructor and blocks.
                                       Local variable scope is inside method, constructor and blocks.
                                       When the method, constructor and block gets executed the variable consumes memory and gets deleted when the methods, cosntructors and blocks gets executed.
                                       It is stored in stack memory.
                                       It dosen't have any default value.
                                       We cannot use access specifier.

                    2. Instance variable: 
                                           It is declared inside the class but outside the methods, constructor and blocks.
                                           It can be accessed through out the class in methods, constructors and blocks.
                                           It occupioes memory when the object is created and gets destroyed when object is destroyed.
                                           It is stored in the heap memory.
                                           They have default values: 
                                           int = 0, boolean = false, object= null.
                                           Access specifiers can be used.
                                           In case of static method we cannot call them directly. So we need to create an object of the class and then we can call them with object.
                                           The scope of instance variable is when the class gets loaded and it gets deleted when the class execution is completed.
 
                    3. Static variable: 
                                          It is same as a instance variable which is declared with the static keyword in a class outside the mehtod, constructor and block.
                                          It's scope is same as instance variable.
                                          When we run program .class file is loaded static variable gets the memory.
                                          It is stored in a non heap memory or static memory.
                                          Default value is similar to instance variable.
                                          Access specifier can be used with the static variable.
                                          It can be accessed:
                                          1. directly  
                                          2. Class name
                                          3. By using object reference

              